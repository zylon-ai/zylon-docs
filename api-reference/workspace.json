{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "API",
    "version" : "latest"
  },
  "externalDocs" : {
    "url" : "/"
  },
  "servers" : [ ],
  "tags" : [ ],
  "paths" : {
    "/v1/auth/google/login" : {
      "get" : {
        "tags" : [ "auth" ],
        "summary" : "OpenID login for Google",
        "description" : "Initiates the OpenID login flow for the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/auth/microsoft/login" : {
      "get" : {
        "tags" : [ "auth" ],
        "summary" : "OpenID login for Microsoft",
        "description" : "Initiates the OpenID login flow for the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/auth/microsoft/callback" : {
      "get" : {
        "tags" : [ ],
        "summary" : "OpenID callback for Microsoft",
        "description" : "Handles the OpenID callback after authentication with the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/auth/login" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Login with credentials",
        "description" : "Login to the account using email and password. This will create a session for the user.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Login with email and password",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.LoginWithCredentialsDTO"
              },
              "examples" : {
                "example" : {
                  "value" : {
                    "email" : "admin@zylon.ai",
                    "password" : "password123"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Successful login",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.AccountDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/auth/register" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Register a new account",
        "description" : "Register a new account with email and password.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Create a new account with email and password",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.CreateCredentialsAccountDTO"
              },
              "examples" : {
                "example" : {
                  "value" : {
                    "email" : "admin",
                    "password" : "password123"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Successful account creation",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.AccountDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/auth/logout" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Logout",
        "description" : "Clear the current session and logout the user.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "No body",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Successful logout",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/account/token" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get API tokens",
        "description" : "Get all API tokens for the current user",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of API tokens",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.core.authentication.token.ApiTokenDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Create API token",
        "description" : "Create a new API token for the current user. Only the hash of the token is stored in the database. The token in the response will be shared as clear text only once as the responseof this operation.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "The details of the API token to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.core.authentication.token.CreateApiTokenDTO"
              },
              "examples" : {
                "example" : {
                  "value" : {
                    "revoke_existing" : false,
                    "valid_until" : "2026-09-01T09:20:42.161749383Z"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "The created API token",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.core.authentication.token.ApiTokenDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "account" ],
        "summary" : "Delete an API token",
        "description" : "Delete an API token by its hash",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "description" : "The hash of the API token to delete",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Confirmation of token deletion",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/account/me" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get current user account",
        "description" : "Get the account details of the currently authenticated user",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The account details of the current user",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.AccountDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/account/organization" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Get account organizations",
        "description" : "Get all organizations that the current user can access",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of organizations accessible by the current user",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.AccountDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/account/organization/{orgId}/join" : {
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Join an organization by its ID.",
        "description" : "Allows the current user to join an organization if the organization allows auto-join and the user's email matches the organization's email regex.",
        "parameters" : [ {
          "name" : "orgId",
          "in" : "path",
          "description" : "The ID of the organization to join",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No body required for this operation",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The user details after joining the organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/me" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Current user details",
        "description" : "Retrieve the details of the currently authenticated user.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Returns the details of the currently authenticated user",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user/{userId}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user details",
        "description" : "Retrieve the details of a specific user by their ID.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to retrieve",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the details of the specified user",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Update user information",
        "description" : "Update the details of a user, including optional profile picture upload.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to update",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user information. Supports both JSON and multipart/form-data for profile picture uploads",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UpdateUserDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the updated user details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get organization users",
        "description" : "Retrieve a paginated list of users in the organization",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "description" : "Comma-separated list of user states to filter by. Options: Active, Inactive. Default is Active,Inactive",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The absolute page number to fetch (1-based).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "Number of items per page. Default is 20.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "Sort order for pagination. Options: ASC, DESC. Default is ASC.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor or value to paginate after (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor or value to paginate before (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "Limits the result to the first N items (after cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Limits the result to the last N items (before cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Include the total count in the response.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a paginated list of users in the organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.user.UserDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Add a user to the organization",
        "description" : "Create a new user and add them to the current organization.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "User information to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.CreateUserDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the created user details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user/{userId}/deactivate" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Deactivate user",
        "description" : "Set a user's state to inactive, effectively deactivating them.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to deactivate",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No body required for this operation",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the deactivated user details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user/{userId}/activate" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Reactivate a user",
        "description" : "Set a user's state to active, effectively reactivating them.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to activate",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No body required for this operation",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the activated user details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user/{userId}/project" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get visible projects for a user",
        "description" : "Retrieve a paginated list of projects that are visible to the specified user.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to get projects for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The absolute page number to fetch (1-based).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "Number of items per page. Default is 20.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "Sort order for pagination. Options: ASC, DESC. Default is ASC.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor or value to paginate after (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor or value to paginate before (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "Limits the result to the first N items (after cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Limits the result to the last N items (before cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Include the total count in the response.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a paginated list of projects visible to the user",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.project.ProjectDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user/{userId}/latest-artifacts" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get latest updated artifacts for a user",
        "description" : "Retrieve a list of the latest updated artifacts for the specified user.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to get artifacts for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "Number of latest artifacts to return. Default is 3",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of the latest updated artifacts for the user",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/user/integrations" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get integrations for the current user",
        "description" : "Retrieve a list of integrations configured for the current user.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of user integrations with their configurations",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.UserIntegrationDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/organization" : {
      "get" : {
        "tags" : [ "user-organization" ],
        "summary" : "Get the current user's organization",
        "description" : "Retrieve the organization details for the currently authenticated user.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "user-organization" ],
        "summary" : "Update the current user's organization",
        "description" : "Update the organization details for the currently authenticated user. This endpoint supports both JSON and multipart form data formats.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "The organization details to update. Can be sent as JSON or multipart form data.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.organization.UpdateOrgDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/leave" : {
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Leave a project",
        "description" : "Allows a user to leave a project they are currently a member of. This will remove them from the project and revoke their access.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to leave",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No additional data is required to leave a project",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/transfer" : {
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Transfer project ownership",
        "description" : "Transfer the ownership of a project to another user. The new owner must be a member of the project.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to transfer",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Contains the ID's of both the actual(old) and the next(new) project owner",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.TransferProjectDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}" : {
      "get" : {
        "tags" : [ "project" ],
        "summary" : "Get project details",
        "description" : "Retrieve detailed information about a specific project, including its members and settings.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to get audit events for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "project" ],
        "summary" : "Update a project",
        "description" : "Update the details of an existing project. Only the owner or members with appropriate permissions can update a project.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to update",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The details to update the project with",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.UpdateProjectDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The updated project",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "project" ],
        "summary" : "Delete a project",
        "description" : "Permanently delete a project and all its associated data, including vectors, artifacts, and interactions. kotlin.Unit",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to delete",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      },
      "patch" : {
        "tags" : [ "project" ],
        "summary" : "Update a project",
        "description" : "Update the details of an existing project. Only the owner or members with appropriate permissions can update a project.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to update",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The details to update the project with",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.UpdateProjectDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project" : {
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Create a new project",
        "description" : "Create a new project with the specified details. The user creating the project will automatically become the owner.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Project details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.CreateProjectDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The created project",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/chat" : {
      "post" : {
        "tags" : [ "project" ],
        "summary" : "Create a ephemeral chat with a project",
        "description" : "Create a non-persistent chat with a project, which can be used for quick discussions or questions related to the project.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Details of the chat to open with the project",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectChatDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/member" : {
      "get" : {
        "tags" : [ "project-member" ],
        "summary" : "Get the members of a project",
        "description" : "Retrieve a paginated list of members for a specific project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to get members for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The absolute page number to fetch (1-based).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "Number of items per page. Default is 20.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "Sort order for pagination. Options: ASC, DESC. Default is ASC.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor or value to paginate after (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor or value to paginate before (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "Limits the result to the first N items (after cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Limits the result to the last N items (before cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Include the total count in the response.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a paginated list of project members",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.project.ProjectMemberDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "project-member" ],
        "summary" : "Update project member",
        "description" : "Update the roles of members in a specific project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to update members in",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The updated member information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.UpdateProjectMembersDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the updated project members",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectMemberDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "project-member" ],
        "summary" : "Add a member to a project",
        "description" : "Add one or more members to a specific project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to add members to",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The members to add to the project",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.AddProjectMembersDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the added project members",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectMemberDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/member/{userId}" : {
      "get" : {
        "tags" : [ "project-member" ],
        "summary" : "Get project member details",
        "description" : "Retrieve details of a specific project member by user ID",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to get member information for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the project member details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectMemberDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "project-member" ],
        "summary" : "Remove project member",
        "description" : "Remove a member from a specific project by user ID",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to remove the member from",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to remove from the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the removed project member details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectMemberDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/interaction/{interactionId}" : {
      "get" : {
        "tags" : [ "interaction" ],
        "summary" : "Get interaction",
        "description" : "Get a specific interaction by its ID within a project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project containing the interaction",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "interactionId",
          "in" : "path",
          "description" : "The ID of the interaction to retrieve",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Interaction details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.InteractionDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "interaction" ],
        "summary" : "Delete interaction",
        "description" : "Delete a specific interaction by its ID within a project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project containing the interaction",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "interactionId",
          "in" : "path",
          "description" : "The ID of the interaction to delete",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Confirmation of interaction deletion",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.InteractionDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/interaction" : {
      "get" : {
        "tags" : [ "interaction" ],
        "summary" : "Get interactions within a project",
        "description" : "Get a paginated list of interactions within a project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to retrieve interactions from",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.InteractionIncludeFields"
            }
          }
        }, {
          "name" : "pageParams",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : { }
        }, {
          "name" : "threadId",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Paginated list of interactions",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.project.interaction.InteractionDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "interaction" ],
        "summary" : "Create interaction",
        "description" : "Create a new interaction within a project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to create the interaction in",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The details of the interaction to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.CreateInteractionDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Created interaction details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.InteractionDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/interaction/{interactionId}/cancel" : {
      "post" : {
        "tags" : [ "interaction" ],
        "summary" : "Cancel interaction",
        "description" : "Cancel an ongoing interaction by its ID within a project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project containing the interaction",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "interactionId",
          "in" : "path",
          "description" : "The ID of the interaction to cancel",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No body required for cancellation",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "headers" : { }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/interaction/{interactionId}/stream" : {
      "get" : {
        "tags" : [ "interaction" ],
        "summary" : "Stream interaction events",
        "description" : "Stream events for a specific interaction by its ID within a project",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project containing the interaction",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "interactionId",
          "in" : "path",
          "description" : "The ID of the interaction to stream",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Stream of MessageOutputEvent",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutputEvent"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/chat" : {
      "post" : {
        "tags" : [ "chat" ],
        "summary" : "Create a non-persistent chat for simple inferences",
        "description" : "Routes for chat interactions",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "The chat request containing the input message and other parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/thread" : {
      "get" : {
        "tags" : [ "threads" ],
        "summary" : "Get project threads",
        "description" : "Routes for managing threads",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "A list of states to filter the threads split by comma",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.ThreadState"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "description" : "A list of extra fields to include on the threads split by comma",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.ThreadIncludeFields"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The absolute page number to fetch (1-based).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "Number of items per page. Default is 20.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "Sort order for pagination. Options: ASC, DESC. Default is ASC.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor or value to paginate after (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor or value to paginate before (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "Limits the result to the first N items (after cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Limits the result to the last N items (before cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Include the total count in the response.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "threads" ],
        "summary" : "Creates a new thread",
        "description" : "Routes for managing threads",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Details of the thread to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.CreateThreadDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/thread/{threadId}" : {
      "get" : {
        "tags" : [ "threads" ],
        "summary" : "Get thread details",
        "description" : "Routes for managing threads",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "threadId",
          "in" : "path",
          "description" : "The ID of the threadId to be deleted",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "threads" ],
        "summary" : "Updates a thread",
        "description" : "Routes for managing threads",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "threadId",
          "in" : "path",
          "description" : "The ID of the threadId to be deleted",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The data to be updated on the thread",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.UpdateThreadDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "threads" ],
        "summary" : "Delete a thread",
        "description" : "Routes for managing threads",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "threadId",
          "in" : "path",
          "description" : "The ID of the threadId to be deleted",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/thread/interaction" : {
      "post" : {
        "tags" : [ "threads" ],
        "summary" : "Create a thread and interaction",
        "description" : "Creates a new thread and interaction in the project, and streams the interaction as a Server-Sent Event (SSE).",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Details of the thread to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.CreateThreadDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/artifact/{artifactId}/children" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get artifact children",
        "description" : "Retrieve a list of artifacts nesting from a specific artifact ",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project.",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifactId.",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "The full path of the artifact",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "The level of depth for the artifact children",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of artifacts for the specified artifact",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.project.artifact.ArtifactDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/artifact" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get project artifacts",
        "description" : "Retrieve a paginated list of artifacts for a specific project, with optional filtering and sorting parameters.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project.",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "A comma-separated list of artifact states to filter by. Example: 'Published,Processing'. If not provided, defaults to [Published, Processing].",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactState"
          }
        }, {
          "name" : "ingest_status",
          "in" : "query",
          "description" : "A comma-separated list of artifact ingest statuses to filter by. Example: 'Ingested,Failed'. If not provided, defaults to all statuses.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactIngestStatus"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "A comma-separated list of artifact types to filter by. Example: 'Document,Image'.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactType"
          }
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "The field by which to order the results. Example: 'createdAt', 'name'.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.QueryOrderBy"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The sort order for the results: ASC for ascending, DESC for descending. Defaults to ASC.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/org.jetbrains.exposed.v1.core.SortOrder"
          }
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "Filter results by the user ID who created the artifact.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter_by_text",
          "in" : "query",
          "description" : "Text to filter artifacts by. Performs a text search over artifacts.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parent_id",
          "in" : "query",
          "description" : "Filter results by parent artifact ID.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter_by_parent",
          "in" : "query",
          "description" : "If true, only artifacts with a parent ID will be included. Defaults to false.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sub_type",
          "in" : "query",
          "description" : "A comma-separated list of artifact sub-types to filter by. Example: 'Image,Report'.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactType"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The absolute page number to fetch (1-based).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "Number of items per page. Default is 20.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "Sort order for pagination. Options: ASC, DESC. Default is ASC.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor or value to paginate after (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor or value to paginate before (for relative pagination).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "Limits the result to the first N items (after cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Limits the result to the last N items (before cursor).",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Include the total count in the response.",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a paginated list of artifacts for the specified project",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.project.artifact.ArtifactDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Create an artifact",
        "description" : "Create a new artifact and schedule it for processing.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The artifact to be created. This body can be submitted as either multipart/form-data (when including a file) or as JSON. Required fields include 'type' (artifact type) and 'name'. The 'config' field must contain a type-specific configuration object, matching the structure expected for the given artifact type. When uploading a file, include the file binary in 'fileData' (multipart only). Other optional fields allow setting metadata, description, parent relationships, external URLs, and ingestion behavior. Extra metadata (in 'metadata') is used internally and not stored persistently.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.CreateArtifactDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the created artifact details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/artifact/{artifactId}" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get artifact details",
        "description" : "Retrieves detailed information about a specific artifact by its ID, including metadata, references, and optionally the content.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifact to retrieve",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "include_content",
          "in" : "path",
          "description" : "If true returns the content of the artifact",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the artifact details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "artifacts" ],
        "summary" : "Update artifact",
        "description" : "Update the metadata of an existing artifact. This does not change the content of the artifact, but allows updating fields like name, description, metadata, and other properties.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifact data to be updated",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "The fields of the artifact to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.UpdateArtifactDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the updated artifact details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "artifacts" ],
        "summary" : "Delete artifact",
        "description" : "Permanently delete an artifact and all its associated data, including vectors, interactions, and metadata. This action cannot be undone.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifact data to be updated",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the deleted artifact details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/artifact/{artifactId}/download" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get secure download URL for an artifact",
        "description" : "Retrieves a secure download URL for an artifact by its ID. This URL can be used to download the artifact content directly and is's only valid for a limited time.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifact to download",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a secure URL to download the artifact content",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/artifact/{artifactId}/parsed-content" : {
      "get" : {
        "tags" : [ "artifacts" ],
        "summary" : "Get parsed content of an artifact",
        "description" : "Retrieves the parsed content of an artifact by its ID. The parsed content is the way LLMs will use the artifact information, usuallyas markdown text.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifact data to retrieve",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the parsed content of the artifact as a string in markdown format",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/artifact/{artifactId}/sync" : {
      "post" : {
        "tags" : [ "artifacts" ],
        "summary" : "Synchronize artifact",
        "description" : "Synchronizes an artifact with the latest data from its source. Generally only used for external integrations that support live updates.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifactId",
          "in" : "path",
          "description" : "The ID of the artifact data to be updated",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "No body required for this operation",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/feedback" : {
      "post" : {
        "tags" : [ "feedback" ],
        "summary" : "Create feedback",
        "description" : "Create feedback for a target node",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "The feedback to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.feedback.CreateFeedbackDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/feedback/{targetId}" : {
      "get" : {
        "tags" : [ "feedback" ],
        "summary" : "Get feedback",
        "description" : "Get feedback for a target node",
        "parameters" : [ {
          "name" : "targetId",
          "in" : "path",
          "description" : "The ID of the target node to get feedback for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/audit" : {
      "get" : {
        "tags" : [ "audit" ],
        "summary" : "Get audit events",
        "description" : "Retrieve all audit events in the system. This will include all artifacts and projects in the search.",
        "parameters" : [ {
          "name" : "actions",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "created_by",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.audit.AuditQueryIncludeFields"
            }
          }
        }, {
          "name" : "node_ids",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number to retrieve (1-based index)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "The order of the items on the page (ASC or DESC)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/org.jetbrains.exposed.v1.core.SortOrder"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor to start after for relative pagination",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor to start before for relative pagination",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "The number of items to return after the cursor",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "The number of items to return before the cursor",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Whether to return the total count of items",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/audit" : {
      "get" : {
        "tags" : [ "audit" ],
        "summary" : "Get audit events",
        "description" : "Retrieve audit events for a specific project. This will include all artifacts and the project itself in the search.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project to get audit events for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "actions",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "created_by",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.audit.AuditQueryIncludeFields"
            }
          }
        }, {
          "name" : "node_ids",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number to retrieve (1-based index)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "The order of the items on the page (ASC or DESC)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/org.jetbrains.exposed.v1.core.SortOrder"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor to start after for relative pagination",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor to start before for relative pagination",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "The number of items to return after the cursor",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "The number of items to return before the cursor",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Whether to return the total count of items",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/info/{userId}" : {
      "get" : {
        "tags" : [ "project", "user-project-info" ],
        "summary" : "Get user project info details",
        "description" : "Retrieve information about a user's interaction with a specific project, including whether the project is pinned by the user.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the userId to get info about the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/project/{projectId}/info" : {
      "post" : {
        "tags" : [ "project", "user-project-info" ],
        "summary" : "Update project user info",
        "description" : "Update or create user project info, such as pinning the project.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "The ID of the project",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Contains the information to update for the user in the project",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.UpdateProjectInfoDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/organization/analytics/totals" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Get total analytics metrics for the organization",
        "description" : "Routes for organization analytics and metrics",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Returns total analytics metrics for the organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.analytics.AnalyticsTotalsDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/organization/analytics/ranking/active-projects" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Get ranking of most active projects in the organization",
        "description" : "Routes for organization analytics and metrics",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date for the ranking period (timestamp in milliseconds)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date for the ranking period (timestamp in milliseconds)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of projects to return. Default is 5",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns ranking of most active projects in the organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.analytics.RankingActiveProjectDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/organization/analytics/ranking/active-users" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Get ranking of most active users in the organization",
        "description" : "Routes for organization analytics and metrics",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date for the ranking period (timestamp in milliseconds)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date for the ranking period (timestamp in milliseconds)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of users to return. Default is 5",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns ranking of most active users in the organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.analytics.RankingActiveUsersDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/organization/analytics/timeseries" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Get time series analytics data for the organization",
        "description" : "Routes for organization analytics and metrics",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date for the time series (timestamp in milliseconds)",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date for the time series (timestamp in milliseconds)",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Type of analytics data. Options: thread, interactions, artifact_agent_flow, artifact_document",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns time series analytics data for the organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.analytics.TimeseriesDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/resource/is-safe-to-modify" : {
      "get" : {
        "tags" : [ "resource" ],
        "summary" : "Check links",
        "description" : "This endpoint checks if the resource is safe to modify by verifying if there are any linked artifacts. It returns a boolean indicating whether the resource can be safely modified without affecting linked artifacts.",
        "parameters" : [ {
          "name" : "created_by",
          "in" : "query",
          "description" : "The user ID who created the artifacts to check",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project_id",
          "in" : "query",
          "description" : "The project ID to check for linked artifacts",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "artifact_id",
          "in" : "query",
          "description" : "The artifact ID to check for linked artifacts",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates whether the resource is safe to modify based on linked artifacts",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.miscellaneous.ResourceIsSafeToModifyDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/search" : {
      "get" : {
        "tags" : [ "search" ],
        "summary" : "Search elements",
        "description" : "Searches elements across artifacts, projects, chats, agent flows",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Term to search",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Comma separated list of resources to limit the search",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.miscellaneous.SearchQueryDTO.SearchType"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum amount of elements to be returned",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created interaction details",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/issue" : {
      "get" : {
        "tags" : [ "issue" ],
        "summary" : "Get all the issues from the current organization",
        "description" : "Retrieve a list of issues",
        "parameters" : [ {
          "name" : "created_by",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "include",
          "in" : "query",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueQueryIncludeFields"
            }
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number to retrieve (1-based index)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "page_order",
          "in" : "query",
          "description" : "The order of the items on the page (ASC or DESC)",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/org.jetbrains.exposed.v1.core.SortOrder"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor to start after for relative pagination",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The cursor to start before for relative pagination",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "The number of items to return after the cursor",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "The number of items to return before the cursor",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "total_count",
          "in" : "query",
          "description" : "Whether to return the total count of items",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "required" : false,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueType"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a paginated list of issues for the actual organization",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/page_array_ai.zylon.backend.server.app.issuetracker.IssueDTO__"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "issue" ],
        "summary" : "Create a new issue",
        "description" : "Create a new issue with the specified details.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Issue details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.CreateIssueDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The created issue",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/issue/{issueId}" : {
      "get" : {
        "tags" : [ "issue" ],
        "summary" : "Get issue details",
        "description" : "Retrieve detailed information about a specific issue.",
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "The ID of the issue to retrieve",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "issue" ],
        "summary" : "Update an issue",
        "description" : "Update the details of an existing issue.",
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "The ID of the issue to update",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The details to update the issue with",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.UpdateIssueDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The updated issue",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "issue" ],
        "summary" : "Delete an issue",
        "description" : "Soft delete an issue. The issue will be marked as deleted but not permanently removed.",
        "parameters" : [ {
          "name" : "issueId",
          "in" : "path",
          "description" : "The ID of the issue to delete",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/confluence/login" : {
      "get" : {
        "tags" : [ "openid" ],
        "summary" : "OpenID login for Confluence",
        "description" : "Initiates the OpenID login flow for the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/confluence/{integrationId}/login" : {
      "get" : {
        "tags" : [ "openid" ],
        "summary" : "OpenID login for Confluence",
        "description" : "Initiates the OpenID login flow for the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/confluence/{integrationId}/refresh_token" : {
      "post" : {
        "tags" : [ "openid" ],
        "summary" : "Refresh OpenID token for an integration",
        "description" : "This endpoint is used to refresh the OpenID token for an existing integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to refresh the token for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No body is required for this request",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "202" : {
            "description" : "The request to refresh the token has been accepted",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/confluence/{integrationId}/config" : {
      "get" : {
        "tags" : [ "confluence-integration" ],
        "summary" : "Integration config for Confluence",
        "description" : "Get the stored configuration for Confluence.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to retrieve the config for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/confluence/{integrationId}/ingest" : {
      "post" : {
        "tags" : [ "confluence-integration" ],
        "summary" : "Ingest data from Confluence",
        "description" : "Ingest data into the system using the Confluence integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to use for ingestion",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The data to ingest, formatted as JSON. The actual structure depends on the integration type.",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
                } ]
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Stream of ingestion results",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.sync.SyncEvent"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/filesystem" : {
      "post" : {
        "tags" : [ "filesystem-integration" ],
        "summary" : "Create a new integration for FileSystem",
        "description" : "Create a new integration of type FileSystem with basic auth configuration.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Configuration for the integration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.BasicAuthIntegrationConfigDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the created integration configuration.",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.UserIntegrationDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/filesystem/{integrationId}" : {
      "post" : {
        "tags" : [ "filesystem-integration" ],
        "summary" : "Update an existing integration for FileSystem",
        "description" : "Update an existing integration of type FileSystem with basic auth configuration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to update",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Configuration for the integration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.BasicAuthIntegrationConfigDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the updated integration configuration.",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.UserIntegrationDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/filesystem/files" : {
      "get" : {
        "tags" : [ "filesystem-integration" ],
        "summary" : "Get files from root directory of the filesystem integration",
        "description" : "Retrieve a list of files from the root directory of the filesystem integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to retrieve files from",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of files from the root directory.",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.implementations.filesystem.FileSystemItem"
                  }
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/filesystem/validate" : {
      "get" : {
        "tags" : [ "filesystem-integration" ],
        "summary" : "Validate filesystem integration credentials",
        "description" : "Validate the credentials for the filesystem integration using basic auth.",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The username for basic auth",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "path",
          "description" : "The password for basic auth",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns true if the credentials are valid, false otherwise.",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/filesystem/{integrationId}/config" : {
      "get" : {
        "tags" : [ "filesystem-integration" ],
        "summary" : "Integration config for FileSystem",
        "description" : "Get the stored configuration for FileSystem.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to retrieve the config for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/filesystem/{integrationId}/ingest" : {
      "post" : {
        "tags" : [ "filesystem-integration" ],
        "summary" : "Ingest data from FileSystem",
        "description" : "Ingest data into the system using the FileSystem integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to use for ingestion",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The data to ingest, formatted as JSON. The actual structure depends on the integration type.",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
                } ]
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Stream of ingestion results",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.sync.SyncEvent"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/sharepoint/login" : {
      "get" : {
        "tags" : [ "openid" ],
        "summary" : "OpenID login for SharePoint",
        "description" : "Initiates the OpenID login flow for the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/sharepoint/{integrationId}/login" : {
      "get" : {
        "tags" : [ "openid" ],
        "summary" : "OpenID login for SharePoint",
        "description" : "Initiates the OpenID login flow for the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/sharepoint/{integrationId}/refresh_token" : {
      "post" : {
        "tags" : [ "openid" ],
        "summary" : "Refresh OpenID token for an integration",
        "description" : "This endpoint is used to refresh the OpenID token for an existing integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to refresh the token for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "No body is required for this request",
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Nothing"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "202" : {
            "description" : "The request to refresh the token has been accepted",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/sharepoint/{integrationId}/config" : {
      "get" : {
        "tags" : [ "sharepoint-integration" ],
        "summary" : "Integration config for SharePoint",
        "description" : "Get the stored configuration for SharePoint.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to retrieve the config for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/sharepoint/{integrationId}/ingest" : {
      "post" : {
        "tags" : [ "sharepoint-integration" ],
        "summary" : "Ingest data from SharePoint",
        "description" : "Ingest data into the system using the SharePoint integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to use for ingestion",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The data to ingest, formatted as JSON. The actual structure depends on the integration type.",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
                } ]
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Stream of ingestion results",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.sync.SyncEvent"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/claromentis" : {
      "post" : {
        "tags" : [ "claromentis-integration" ],
        "summary" : "Create a new integration for Claromentis",
        "description" : "Create a new integration of type Claromentis with basic auth configuration.",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Configuration for the integration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.BasicAuthIntegrationConfigDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the created integration configuration.",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.UserIntegrationDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/claromentis/{integrationId}" : {
      "post" : {
        "tags" : [ "claromentis-integration" ],
        "summary" : "Update an existing integration for Claromentis",
        "description" : "Update an existing integration of type Claromentis with basic auth configuration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to update",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Configuration for the integration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.BasicAuthIntegrationConfigDTO"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns the updated integration configuration.",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.UserIntegrationDTO"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/claromentis/{integrationId}/config" : {
      "get" : {
        "tags" : [ "claromentis-integration" ],
        "summary" : "Integration config for Claromentis",
        "description" : "Get the stored configuration for Claromentis.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to retrieve the config for",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/claromentis/{integrationId}/ingest" : {
      "post" : {
        "tags" : [ "claromentis-integration" ],
        "summary" : "Ingest data from Claromentis",
        "description" : "Ingest data into the system using the Claromentis integration.",
        "parameters" : [ {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The ID of the integration to use for ingestion",
          "required" : true,
          "deprecated" : false,
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The data to ingest, formatted as JSON. The actual structure depends on the integration type.",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
                }, {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
                } ]
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Stream of ingestion results",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.sync.SyncEvent"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/health" : {
      "get" : {
        "tags" : [ "global" ],
        "summary" : "Health check",
        "description" : "Health check",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Health status",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/health"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/license" : {
      "get" : {
        "tags" : [ "global" ],
        "summary" : "License information",
        "description" : "Returns the license information for Zylon. If no license is available, an empty JSON object is returned.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "License information",
            "headers" : { },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/license"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/v1/app/integration/confluence/callback" : {
      "get" : {
        "tags" : [ ],
        "summary" : "OpenID callback for Confluence",
        "description" : "Handles the OpenID callback after authentication with the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    },
    "/v1/app/integration/sharepoint/callback" : {
      "get" : {
        "tags" : [ ],
        "summary" : "OpenID callback for SharePoint",
        "description" : "Handles the OpenID callback after authentication with the specified provider.",
        "parameters" : [ ],
        "responses" : { },
        "deprecated" : false
      }
    }
  },
  "components" : {
    "schemas" : {
      "ai.zylon.backend.server.app.account.LoginWithCredentialsDTO" : {
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "password" ]
      },
      "ai.zylon.backend.server.app.account.AccountDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "given_name" : {
            "type" : "string"
          },
          "family_name" : {
            "type" : "string"
          },
          "provider" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.account.AuthProviderName"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
            }
          }
        },
        "required" : [ "email", "id", "name", "provider" ]
      },
      "ai.zylon.backend.server.app.account.AuthProviderName" : {
        "enum" : [ "AccountToken", "UserToken", "AccountSession", "UserSession", "Credentials", "Mock", "Google", "Microsoft", "Confluence", "SharePoint" ]
      },
      "ai.zylon.backend.server.app.user.UserDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "org_id" : {
            "type" : "string"
          },
          "account_id" : {
            "type" : "string"
          },
          "profile_picture" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "job_position_name" : {
            "type" : "string"
          },
          "job_position_description" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserState"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.core.authorization.RoleName"
            }
          },
          "created_at" : {
            "type" : "number"
          }
        },
        "required" : [ "account_id", "created_at", "email", "id", "name", "org_id", "roles", "state" ]
      },
      "ai.zylon.backend.server.app.user.UserState" : {
        "enum" : [ "Active", "Inactive" ]
      },
      "ai.zylon.backend.core.authorization.RoleName" : {
        "enum" : [ "AppGuest", "AppMember", "AppAdmin", "AppOwner", "SuperAdmin", "AccountOwner" ]
      },
      "ai.zylon.backend.server.app.account.CreateCredentialsAccountDTO" : {
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "password" ]
      },
      "ai.zylon.backend.core.authentication.token.ApiTokenDTO" : {
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "hashed_token" : {
            "type" : "string"
          },
          "token_email" : {
            "type" : "string"
          },
          "last_used_at" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "valid_until" : {
            "type" : "string"
          }
        },
        "required" : [ "created_at", "hashed_token", "last_used_at", "token_email", "valid_until" ]
      },
      "ai.zylon.backend.core.authentication.token.CreateApiTokenDTO" : {
        "properties" : {
          "revoke_existing" : {
            "type" : "boolean"
          },
          "valid_until" : {
            "type" : "string"
          }
        }
      },
      "page_array_ai.zylon.backend.server.app.user.UserDTO__" : {
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
            }
          },
          "next_cursor" : {
            "type" : "string"
          },
          "previous_cursor" : {
            "type" : "string"
          },
          "has_next_page" : {
            "type" : "boolean"
          },
          "has_previous_page" : {
            "type" : "boolean"
          },
          "total_count" : {
            "type" : "number"
          }
        },
        "required" : [ "data", "has_next_page", "has_previous_page" ]
      },
      "ai.zylon.backend.server.app.user.CreateUserDTO" : {
        "properties" : {
          "account_id" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.core.authorization.RoleName"
          },
          "user_info" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.core.authentication.UserInfo"
          }
        },
        "required" : [ "account_id", "role" ]
      },
      "ai.zylon.backend.core.authentication.UserInfo" : {
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "given_name" : {
            "type" : "string"
          },
          "family_name" : {
            "type" : "string"
          },
          "picture" : {
            "type" : "string"
          }
        },
        "required" : [ "email" ]
      },
      "ai.zylon.backend.server.app.user.UpdateUserDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.core.authorization.RoleName"
          },
          "profile_picture_file_name" : {
            "type" : "string"
          },
          "profile_picture_content_type" : {
            "type" : "string"
          },
          "profile_picture_content_length" : {
            "type" : "number"
          },
          "profile_picture" : {
            "type" : "string"
          }
        }
      },
      "page_array_ai.zylon.backend.server.app.project.ProjectDTO__" : {
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectDTO"
            }
          },
          "next_cursor" : {
            "type" : "string"
          },
          "previous_cursor" : {
            "type" : "string"
          },
          "has_next_page" : {
            "type" : "boolean"
          },
          "has_previous_page" : {
            "type" : "boolean"
          },
          "total_count" : {
            "type" : "number"
          }
        },
        "required" : [ "data", "has_next_page", "has_previous_page" ]
      },
      "ai.zylon.backend.server.app.project.ProjectDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "goal" : {
            "type" : "string"
          },
          "default_member_role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.member.ProjectMemberRole"
          },
          "default_role_enabled" : {
            "type" : "boolean"
          },
          "deadline" : {
            "type" : "string"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectVisibility"
          },
          "member_count" : {
            "type" : "number"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectMemberDTO"
            }
          },
          "project_context" : {
            "type" : "string"
          },
          "answer_context" : {
            "type" : "string"
          },
          "is_pinned" : {
            "type" : "boolean"
          }
        },
        "required" : [ "deadline", "default_member_role", "default_role_enabled", "id", "member_count", "name", "visibility" ]
      },
      "ai.zylon.backend.server.app.project.member.ProjectMemberRole" : {
        "enum" : [ "Viewer", "Commenter", "Editor", "Admin", "Owner" ]
      },
      "ai.zylon.backend.server.app.project.ProjectVisibility" : {
        "enum" : [ "Public", "Private" ]
      },
      "ai.zylon.backend.server.app.project.ProjectMemberDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.member.ProjectMemberRole"
          },
          "user" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
          },
          "is_project_member" : {
            "type" : "boolean"
          }
        },
        "required" : [ "id", "is_project_member", "role", "user" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "parent_id" : {
            "type" : "string"
          },
          "child_count" : {
            "type" : "number"
          },
          "project_id" : {
            "type" : "string"
          },
          "project" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectDTO"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactType"
          },
          "source" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactSource"
          },
          "state" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactState"
          },
          "error" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactError"
          },
          "ingest_status" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactIngestStatus"
          },
          "ingest_warnings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactWarning"
            }
          },
          "ingest_progress" : {
            "type" : "number"
          },
          "has_content" : {
            "type" : "boolean"
          },
          "content" : {
            "type" : "string"
          },
          "raw_content" : {
            "type" : "string"
          },
          "integration_id" : {
            "type" : "string"
          },
          "external_url" : {
            "type" : "string"
          },
          "config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          },
          "file_uri" : {
            "type" : "string"
          },
          "artifact_references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
            }
          },
          "keep_file_after_ingestion" : {
            "type" : "boolean"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        },
        "required" : [ "config", "created_at", "has_content", "id", "ingest_status", "keep_file_after_ingestion", "name", "project_id", "source", "state", "type", "updated_at" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactType" : {
        "enum" : [ "InlineText", "Document", "Folder", "Summary", "Composition", "SmartDoc", "Link", "BulkQA", "ReadAndExtract" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactSource" : {
        "enum" : [ "User", "SharePoint", "Confluence", "Claromentis", "FileSystem", "Mock" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactState" : {
        "enum" : [ "Initializing", "Processing", "Draft", "Deleted", "Published", "Unavailable", "Error" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactError" : {
        "enum" : [ "Unknown", "InternalError", "MismatchedType", "InvalidExtension", "MaxNodes", "Malformed", "Encrypted", "NoValidFile", "NoValidNodes" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactIngestStatus" : {
        "enum" : [ "NotApplicable", "NotStarted", "Processing", "Parsing", "Storing", "Done", "Error" ]
      },
      "ai.zylon.backend.server.app.project.artifact.ArtifactWarning" : {
        "enum" : [ "Unknown", "BigSize", "ExceedsRecommendedPages", "SpecialConfig", "NoContent", "UnprocessableContent", "DescendantHasError" ]
      },
      "ai.zylon.backend.server.app.integration.UserIntegrationDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "user_id" : {
            "type" : "string"
          },
          "org_id" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactSource"
          },
          "provider_data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          }
        },
        "required" : [ "created_at", "id", "org_id", "provider_data", "type", "updated_at", "user_id" ]
      },
      "ai.zylon.backend.server.app.organization.UpdateOrgDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "context" : {
            "type" : "string"
          },
          "clear_context" : {
            "type" : "boolean"
          },
          "email_regex" : {
            "type" : "string"
          },
          "logo_file_name" : {
            "type" : "string"
          },
          "logo_content_type" : {
            "type" : "string"
          },
          "logo_content_length" : {
            "type" : "number"
          }
        }
      },
      "ai.zylon.backend.server.app.project.TransferProjectDTO" : {
        "properties" : {
          "old_owner_id" : {
            "type" : "string"
          },
          "new_owner_id" : {
            "type" : "string"
          }
        },
        "required" : [ "new_owner_id", "old_owner_id" ]
      },
      "ai.zylon.backend.server.app.project.CreateProjectDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "goal" : {
            "type" : "string"
          },
          "deadline" : {
            "type" : "number"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectVisibility"
          }
        },
        "required" : [ "name" ]
      },
      "ai.zylon.backend.server.app.project.ProjectChatDTO" : {
        "properties" : {
          "artifact_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "all_artifacts" : {
            "type" : "boolean"
          },
          "pgpt" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest"
          }
        },
        "required" : [ "pgpt" ]
      },
      "ai.zylon.koala.privategpt.ChatRequest" : {
        "properties" : {
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageInput"
            }
          },
          "stream" : {
            "type" : "boolean"
          },
          "tools" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.tool.Tool"
            }
          },
          "tool_choice" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest.ToolChoice"
          },
          "mcp_servers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.McpServer"
            }
          },
          "response_format" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest.ResponseFormat"
          },
          "system" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest.System"
          },
          "thinking" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest.Thinking"
          },
          "priority" : {
            "type" : "number"
          },
          "seed" : {
            "type" : "number"
          },
          "min_p" : {
            "type" : "number"
          },
          "top_p" : {
            "type" : "number"
          },
          "temperature" : {
            "type" : "number"
          },
          "top_k" : {
            "type" : "number"
          },
          "repetition_penalty" : {
            "type" : "number"
          },
          "presence_penalty" : {
            "type" : "number"
          },
          "frequency_penalty" : {
            "type" : "number"
          },
          "max_tokens" : {
            "type" : "number"
          },
          "correlation_id" : {
            "type" : "string"
          }
        }
      },
      "ai.zylon.koala.model.message.MessageInput" : {
        "properties" : {
          "role" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageInputRole"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
            }
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "content", "role" ]
      },
      "ai.zylon.koala.model.message.MessageInputRole" : {
        "enum" : [ "system", "user", "assistant", "tool" ]
      },
      "ai.zylon.koala.model.message.ContentBlock" : {
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/file"
        }, {
          "$ref" : "#/components/schemas/image"
        }, {
          "$ref" : "#/components/schemas/source"
        }, {
          "$ref" : "#/components/schemas/tldr"
        }, {
          "$ref" : "#/components/schemas/text"
        }, {
          "$ref" : "#/components/schemas/thinking"
        }, {
          "$ref" : "#/components/schemas/tool_result"
        }, {
          "$ref" : "#/components/schemas/tool_use"
        } ]
      },
      "file" : {
        "properties" : {
          "content" : {
            "type" : "string"
          },
          "content_type" : {
            "type" : "string"
          },
          "doc_metadata" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource.DocMetadata"
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "content" ]
      },
      "ai.zylon.koala.model.message.PGPTSource.DocMetadata" : {
        "properties" : {
          "file_name" : {
            "type" : "string"
          },
          "file_type" : {
            "type" : "string"
          }
        }
      },
      "image" : {
        "properties" : {
          "data" : {
            "type" : "string"
          },
          "mime_type" : {
            "type" : "string"
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "data" ]
      },
      "source" : {
        "properties" : {
          "sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource"
            }
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        }
      },
      "ai.zylon.koala.model.message.PGPTSource" : {
        "properties" : {
          "object" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "score" : {
            "type" : "number"
          },
          "document" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource.Document"
          },
          "text" : {
            "type" : "string"
          },
          "content_type" : {
            "type" : "string"
          },
          "previous_texts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "next_texts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource.SourceMetadata"
          }
        },
        "required" : [ "object" ]
      },
      "ai.zylon.koala.model.message.PGPTSource.Document" : {
        "properties" : {
          "object" : {
            "type" : "string"
          },
          "artifact" : {
            "type" : "string"
          },
          "doc_metadata" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource.DocMetadata"
          }
        },
        "required" : [ "object" ]
      },
      "ai.zylon.koala.model.message.PGPTSource.SourceMetadata" : {
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "page" : {
            "type" : "number"
          },
          "shorter_id" : {
            "type" : "string"
          }
        }
      },
      "tldr" : {
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
            }
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "content" ]
      },
      "text" : {
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "citations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTCitation"
            }
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        }
      },
      "ai.zylon.koala.model.message.PGPTCitation" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "index" : {
            "type" : "string"
          },
          "artifact_id" : {
            "type" : "string"
          },
          "source_id" : {
            "type" : "string"
          },
          "correlation_id" : {
            "type" : "string"
          }
        }
      },
      "thinking" : {
        "properties" : {
          "thinking" : {
            "type" : "string"
          },
          "citations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTCitation"
            }
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        }
      },
      "tool_result" : {
        "properties" : {
          "tool_use_id" : {
            "type" : "string"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
            }
          },
          "is_error" : {
            "type" : "boolean"
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "content", "tool_use_id" ]
      },
      "tool_use" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "input" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          },
          "start_timestamp" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "id", "input", "name" ]
      },
      "ai.zylon.koala.model.tool.Tool" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "inputSchema" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.tool.Tool.Input"
          }
        },
        "required" : [ "name" ]
      },
      "ai.zylon.koala.model.tool.Tool.Input" : {
        "properties" : {
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          },
          "required" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "ai.zylon.koala.privategpt.ChatRequest.ToolChoice" : {
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "disable_parallel_tool_use" : {
            "type" : "boolean"
          }
        }
      },
      "ai.zylon.koala.privategpt.McpServer" : {
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "authorization_token" : {
            "type" : "string"
          },
          "tool_configuration" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.McpServer.ToolConfiguration"
          },
          "type" : {
            "type" : "string"
          }
        },
        "required" : [ "url" ]
      },
      "ai.zylon.koala.privategpt.McpServer.ToolConfiguration" : {
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          },
          "allowed_tools" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ai.zylon.koala.privategpt.ChatRequest.ResponseFormat" : {
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest.ResponseFormat.ResponseFormatType"
          },
          "json_schema" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "type" ]
      },
      "ai.zylon.koala.privategpt.ChatRequest.ResponseFormat.ResponseFormatType" : {
        "enum" : [ "text", "json_schema" ]
      },
      "ai.zylon.koala.privategpt.ChatRequest.System" : {
        "properties" : {
          "use_default_prompt" : {
            "type" : "boolean"
          },
          "text" : {
            "type" : "string"
          },
          "citations" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest.System.Citations"
          }
        }
      },
      "ai.zylon.koala.privategpt.ChatRequest.System.Citations" : {
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          },
          "known_citations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTCitation"
            }
          }
        }
      },
      "ai.zylon.koala.privategpt.ChatRequest.Thinking" : {
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          }
        }
      },
      "ai.zylon.backend.server.app.project.UpdateProjectDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "goal" : {
            "type" : "string"
          },
          "deadline" : {
            "type" : "string"
          },
          "default_member_role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.member.ProjectMemberRole"
          },
          "default_role_enabled" : {
            "type" : "boolean"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectVisibility"
          },
          "project_context" : {
            "type" : "string"
          },
          "answer_context" : {
            "type" : "string"
          }
        }
      },
      "page_array_ai.zylon.backend.server.app.project.ProjectMemberDTO__" : {
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectMemberDTO"
            }
          },
          "next_cursor" : {
            "type" : "string"
          },
          "previous_cursor" : {
            "type" : "string"
          },
          "has_next_page" : {
            "type" : "boolean"
          },
          "has_previous_page" : {
            "type" : "boolean"
          },
          "total_count" : {
            "type" : "number"
          }
        },
        "required" : [ "data", "has_next_page", "has_previous_page" ]
      },
      "ai.zylon.backend.server.app.project.AddProjectMembersDTO" : {
        "properties" : {
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.CreateProjectMemberDTO"
            }
          }
        },
        "required" : [ "members" ]
      },
      "ai.zylon.backend.server.app.project.CreateProjectMemberDTO" : {
        "properties" : {
          "user_id" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.member.ProjectMemberRole"
          }
        },
        "required" : [ "role", "user_id" ]
      },
      "ai.zylon.backend.server.app.project.UpdateProjectMembersDTO" : {
        "properties" : {
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.UpdateProjectMemberDTO"
            }
          }
        },
        "required" : [ "members" ]
      },
      "ai.zylon.backend.server.app.project.UpdateProjectMemberDTO" : {
        "properties" : {
          "user_id" : {
            "type" : "string"
          },
          "role" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.member.ProjectMemberRole"
          },
          "is_pinned" : {
            "type" : "boolean"
          }
        },
        "required" : [ "user_id" ]
      },
      "ai.zylon.backend.server.app.project.interaction.InteractionDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "project_id" : {
            "type" : "string"
          },
          "thread_id" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.InteractionState"
          },
          "user_input" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageInput"
          },
          "assistant_output" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutput"
          },
          "artifact_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "all_artifacts" : {
            "type" : "boolean"
          },
          "created_at" : {
            "type" : "string"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
          }
        },
        "required" : [ "created_at", "id", "project_id", "state", "user_input" ]
      },
      "ai.zylon.backend.server.app.project.interaction.InteractionState" : {
        "enum" : [ "Processing", "Completed", "Error" ]
      },
      "ai.zylon.koala.model.message.MessageOutput" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "created" : {
            "type" : "number"
          },
          "model" : {
            "type" : "string"
          },
          "stop_reason" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutputStopReason"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
            }
          },
          "usage" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.CompletionUsage"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutputEvent.Error.ErrorDetail"
            }
          }
        }
      },
      "ai.zylon.koala.model.message.MessageOutputStopReason" : {
        "enum" : [ "stop", "error", "cancelled" ]
      },
      "ai.zylon.koala.model.message.CompletionUsage" : {
        "properties" : {
          "input_tokens" : {
            "type" : "number"
          },
          "output_tokens" : {
            "type" : "number"
          }
        }
      },
      "ai.zylon.koala.model.message.MessageOutputEvent.Error.ErrorDetail" : {
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "type" ]
      },
      "ai.zylon.backend.server.app.project.interaction.InteractionIncludeFields" : {
        "enum" : [ "User" ]
      },
      "page_array_ai.zylon.backend.server.app.project.interaction.InteractionDTO__" : {
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.interaction.InteractionDTO"
            }
          },
          "next_cursor" : {
            "type" : "string"
          },
          "previous_cursor" : {
            "type" : "string"
          },
          "has_next_page" : {
            "type" : "boolean"
          },
          "has_previous_page" : {
            "type" : "boolean"
          },
          "total_count" : {
            "type" : "number"
          }
        },
        "required" : [ "data", "has_next_page", "has_previous_page" ]
      },
      "ai.zylon.backend.server.app.project.interaction.CreateInteractionDTO" : {
        "properties" : {
          "thread_id" : {
            "type" : "string"
          },
          "all_artifacts" : {
            "type" : "boolean"
          },
          "artifact_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pgpt" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.privategpt.ChatRequest"
          },
          "agent" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.agent.AgentType"
          }
        }
      },
      "ai.zylon.backend.server.app.agent.AgentType" : {
        "enum" : [ "Default", "ProjectDeepResearch" ]
      },
      "ai.zylon.koala.model.message.MessageOutputEvent" : {
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/content_block_delta"
        }, {
          "$ref" : "#/components/schemas/content_block_start"
        }, {
          "$ref" : "#/components/schemas/content_block_stop"
        }, {
          "$ref" : "#/components/schemas/done"
        }, {
          "$ref" : "#/components/schemas/error"
        }, {
          "$ref" : "#/components/schemas/message_delta"
        }, {
          "$ref" : "#/components/schemas/message_start"
        }, {
          "$ref" : "#/components/schemas/message_stop"
        }, {
          "$ref" : "#/components/schemas/content_block_synthetic"
        } ]
      },
      "content_block_delta" : {
        "properties" : {
          "block_id" : {
            "type" : "string"
          },
          "delta" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlockDelta"
          }
        },
        "required" : [ "block_id", "delta" ]
      },
      "ai.zylon.koala.model.message.ContentBlockDelta" : {
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/input_json_delta"
        }, {
          "$ref" : "#/components/schemas/source_delta"
        }, {
          "$ref" : "#/components/schemas/tldr_delta"
        }, {
          "$ref" : "#/components/schemas/text_delta"
        }, {
          "$ref" : "#/components/schemas/thinking_delta"
        } ]
      },
      "input_json_delta" : {
        "properties" : {
          "partial_json" : {
            "type" : "string"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "partial_json" ]
      },
      "source_delta" : {
        "properties" : {
          "sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource"
            }
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        }
      },
      "tldr_delta" : {
        "properties" : {
          "tldr" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        },
        "required" : [ "tldr" ]
      },
      "text_delta" : {
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "citations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTCitation"
            }
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        }
      },
      "thinking_delta" : {
        "properties" : {
          "thinking" : {
            "type" : "string"
          },
          "citations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTCitation"
            }
          },
          "_meta" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          }
        }
      },
      "content_block_start" : {
        "properties" : {
          "block_id" : {
            "type" : "string"
          },
          "content_block" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
          }
        },
        "required" : [ "block_id", "content_block" ]
      },
      "content_block_stop" : {
        "properties" : {
          "block_id" : {
            "type" : "string"
          },
          "stop_timestamp" : {
            "type" : "string"
          }
        },
        "required" : [ "block_id" ]
      },
      "done" : { },
      "error" : {
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutputEvent.Error.ErrorDetail"
          }
        }
      },
      "message_delta" : {
        "properties" : {
          "delta" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutputDelta"
          }
        },
        "required" : [ "delta" ]
      },
      "ai.zylon.koala.model.message.MessageOutputDelta" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "created" : {
            "type" : "number"
          },
          "model" : {
            "type" : "string"
          },
          "stop_reason" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutputStopReason"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
            }
          },
          "usage" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.CompletionUsage"
          }
        }
      },
      "message_start" : {
        "properties" : {
          "message" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.MessageOutput"
          }
        },
        "required" : [ "message" ]
      },
      "message_stop" : { },
      "content_block_synthetic" : {
        "properties" : {
          "block_id" : {
            "type" : "string"
          },
          "block" : {
            "$ref" : "#/components/schemas/ai.zylon.koala.model.message.ContentBlock"
          }
        },
        "required" : [ "block", "block_id" ]
      },
      "ai.zylon.backend.server.app.project.thread.ThreadState" : {
        "enum" : [ "Active", "Deleted" ]
      },
      "ai.zylon.backend.server.app.project.thread.ThreadIncludeFields" : {
        "enum" : [ "User" ]
      },
      "ai.zylon.backend.server.app.project.thread.UpdateThreadDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.ThreadVisibility"
          }
        }
      },
      "ai.zylon.backend.server.app.project.thread.ThreadVisibility" : {
        "enum" : [ "Public", "Private" ]
      },
      "ai.zylon.backend.server.app.project.thread.CreateThreadDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.thread.ThreadVisibility"
          }
        },
        "required" : [ "name", "visibility" ]
      },
      "page_array_ai.zylon.backend.server.app.project.artifact.ArtifactDTO__" : {
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
            }
          },
          "next_cursor" : {
            "type" : "string"
          },
          "previous_cursor" : {
            "type" : "string"
          },
          "has_next_page" : {
            "type" : "boolean"
          },
          "has_previous_page" : {
            "type" : "boolean"
          },
          "total_count" : {
            "type" : "number"
          }
        },
        "required" : [ "data", "has_next_page", "has_previous_page" ]
      },
      "ai.zylon.backend.server.app.QueryOrderBy" : {
        "enum" : [ "Alphabetical" ]
      },
      "org.jetbrains.exposed.v1.core.SortOrder" : {
        "enum" : [ "ASC", "DESC", "ASC_NULLS_FIRST", "DESC_NULLS_FIRST", "ASC_NULLS_LAST", "DESC_NULLS_LAST" ]
      },
      "ai.zylon.backend.server.app.project.artifact.CreateArtifactDTO" : {
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactType"
          },
          "source" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactSource"
          },
          "name" : {
            "type" : "string"
          },
          "parent_id" : {
            "type" : "string"
          },
          "integration_id" : {
            "type" : "string"
          },
          "external_url" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "raw_content" : {
            "type" : "string"
          },
          "keep_file_after_ingestion" : {
            "type" : "boolean"
          },
          "config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          }
        },
        "required" : [ "config", "name", "type" ]
      },
      "ai.zylon.backend.server.app.project.artifact.document.DocumentArtifactConfig" : {
        "properties" : {
          "file_name" : {
            "type" : "string"
          },
          "content_length" : {
            "type" : "number"
          },
          "content_type" : {
            "type" : "string"
          },
          "metadata" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          }
        },
        "required" : [ "content_type", "file_name" ]
      },
      "ai.zylon.backend.server.app.project.artifact.folder.FolderArtifactArtifactConfig" : {
        "properties" : {
          "metadata" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          }
        }
      },
      "ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig" : {
        "properties" : {
          "questions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig.Result"
            }
          },
          "artifact_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instructions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "detail" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig.Detail"
          },
          "style" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig.Style"
          },
          "organization_context" : {
            "type" : "string"
          }
        },
        "required" : [ "artifact_ids", "detail", "instructions", "questions", "style" ]
      },
      "ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig.Result" : {
        "properties" : {
          "question" : {
            "type" : "string"
          },
          "response" : {
            "type" : "string"
          },
          "sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.koala.model.message.PGPTSource"
            }
          }
        },
        "required" : [ "question", "response", "sources" ]
      },
      "ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig.Detail" : {
        "enum" : [ "Concise", "Moderate", "Comprehensive" ]
      },
      "ai.zylon.backend.server.app.project.artifact.bulkqa.BulkQAArtifactConfig.Style" : {
        "enum" : [ "Expert", "Neutral", "Simple" ]
      },
      "ai.zylon.backend.server.app.project.artifact.composition.CompositionArtifactConfig" : {
        "properties" : {
          "artifact_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "instructions" : {
            "type" : "string"
          },
          "style" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.composition.CompositionStyle"
          },
          "detail" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.composition.CompositionDetailLevel"
          },
          "organization_context" : {
            "type" : "string"
          }
        },
        "required" : [ "artifact_ids", "detail", "instructions", "style" ]
      },
      "ai.zylon.backend.server.app.project.artifact.composition.CompositionStyle" : {
        "enum" : [ "Expert", "Neutral", "Simple" ]
      },
      "ai.zylon.backend.server.app.project.artifact.composition.CompositionDetailLevel" : {
        "enum" : [ "KeyPoints", "ShortPieces", "LongPieces" ]
      },
      "ai.zylon.backend.server.app.project.artifact.summary.SummaryArtifactConfigDTO" : {
        "properties" : {
          "artifact_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "style" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.summary.SummaryStyle"
          },
          "detail" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.summary.SummaryDetailLevel"
          },
          "instructions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "artifact_ids", "detail", "instructions", "style" ]
      },
      "ai.zylon.backend.server.app.project.artifact.summary.SummaryStyle" : {
        "enum" : [ "Casual", "Professional", "Original", "Simplified", "Expert", "Neutral", "Simple" ]
      },
      "ai.zylon.backend.server.app.project.artifact.summary.SummaryDetailLevel" : {
        "enum" : [ "Detailed", "Standard", "Complete", "InDepth", "Overview", "Highlights", "KeyPoints", "ShortPieces", "LongPieces" ]
      },
      "ai.zylon.backend.server.app.project.artifact.link.LinkArtifactConfigDTO" : {
        "properties" : {
          "original_artifact_id" : {
            "type" : "string"
          }
        },
        "required" : [ "original_artifact_id" ]
      },
      "ai.zylon.backend.server.app.project.artifact.UpdateArtifactDTO" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "parent_id" : {
            "type" : "string"
          },
          "reset_parent_id" : {
            "type" : "boolean"
          },
          "external_url" : {
            "type" : "string"
          },
          "config" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
              }, {
                "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
              } ]
            }
          },
          "description" : {
            "type" : "string"
          },
          "content" : {
            "type" : "string"
          }
        }
      },
      "ai.zylon.backend.server.app.feedback.CreateFeedbackDTO" : {
        "properties" : {
          "target_id" : {
            "type" : "string"
          },
          "feature" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.ApplicationFeature"
          },
          "score" : {
            "type" : "number"
          }
        },
        "required" : [ "feature", "score", "target_id" ]
      },
      "ai.zylon.backend.server.app.ApplicationFeature" : {
        "enum" : [ "Summary", "Composition", "AnswerHub", "CompositionSection" ]
      },
      "ai.zylon.backend.server.app.audit.AuditQueryIncludeFields" : {
        "enum" : [ "User" ]
      },
      "ai.zylon.backend.server.app.project.UpdateProjectInfoDTO" : {
        "properties" : {
          "is_pinned" : {
            "type" : "boolean"
          }
        },
        "required" : [ "is_pinned" ]
      },
      "ai.zylon.backend.server.app.analytics.AnalyticsTotalsDTO" : {
        "properties" : {
          "projects_total" : {
            "type" : "number"
          },
          "threads_total" : {
            "type" : "number"
          },
          "interactions_total" : {
            "type" : "number"
          },
          "agent_flows_total" : {
            "type" : "number"
          },
          "uploaded_artifacts_total" : {
            "type" : "number"
          }
        },
        "required" : [ "agent_flows_total", "interactions_total", "projects_total", "threads_total", "uploaded_artifacts_total" ]
      },
      "ai.zylon.backend.server.app.analytics.RankingActiveProjectDTO" : {
        "properties" : {
          "project" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectDTO"
          },
          "interactions_created" : {
            "type" : "number"
          },
          "agent_flows_created" : {
            "type" : "number"
          }
        },
        "required" : [ "agent_flows_created", "interactions_created", "project" ]
      },
      "ai.zylon.backend.server.app.analytics.RankingActiveUsersDTO" : {
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
          },
          "interactions_created" : {
            "type" : "number"
          },
          "agent_flows_created" : {
            "type" : "number"
          }
        },
        "required" : [ "agent_flows_created", "interactions_created", "user" ]
      },
      "ai.zylon.backend.server.app.analytics.TimeseriesDTO" : {
        "properties" : {
          "date" : {
            "type" : "string"
          },
          "value" : {
            "type" : "number"
          }
        },
        "required" : [ "date", "value" ]
      },
      "ai.zylon.backend.server.app.miscellaneous.ResourceIsSafeToModifyDTO" : {
        "properties" : {
          "has_linked_artifacts" : {
            "type" : "boolean"
          }
        },
        "required" : [ "has_linked_artifacts" ]
      },
      "ai.zylon.backend.server.app.miscellaneous.SearchQueryDTO.SearchType" : {
        "enum" : [ "Artifact", "Thread", "Interaction", "Project" ]
      },
      "ai.zylon.backend.server.app.search.SearchResult" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.miscellaneous.SearchQueryDTO.SearchType"
          },
          "match" : {
            "type" : "string"
          },
          "rank" : {
            "type" : "number"
          },
          "metadata" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          }
        },
        "required" : [ "id", "match", "rank", "type" ]
      },
      "ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata" : {
        "properties" : {
          "entity" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.ProjectDTO"
          }
        },
        "required" : [ "entity" ]
      },
      "ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "project_id" : {
            "type" : "string"
          },
          "project_name" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "project_id", "project_name" ]
      },
      "ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "project_id" : {
            "type" : "string"
          },
          "project_name" : {
            "type" : "string"
          }
        },
        "required" : [ "name", "project_id", "project_name", "type" ]
      },
      "ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata" : {
        "properties" : {
          "content" : {
            "type" : "string"
          },
          "thread_id" : {
            "type" : "string"
          },
          "project_id" : {
            "type" : "string"
          },
          "project_name" : {
            "type" : "string"
          },
          "thread_name" : {
            "type" : "string"
          }
        },
        "required" : [ "content", "project_id", "project_name", "thread_id", "thread_name" ]
      },
      "ai.zylon.backend.server.app.issuetracker.CreateIssueDTO" : {
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "resource_type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.ResourceType"
          },
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueType"
          },
          "config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          },
          "anonymous" : {
            "type" : "boolean"
          }
        },
        "required" : [ "anonymous", "config", "resource_type", "type" ]
      },
      "ai.zylon.backend.server.app.issuetracker.ResourceType" : {
        "enum" : [ "Thread" ]
      },
      "ai.zylon.backend.server.app.issuetracker.IssueType" : {
        "enum" : [ "NoAnswer", "Inaccurate", "NoContextUsed", "Format", "Other" ]
      },
      "ai.zylon.backend.server.app.issuetracker.IssueDTO" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "resource_type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.ResourceType"
          },
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueType"
          },
          "state" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueState"
          },
          "is_read" : {
            "type" : "boolean"
          },
          "data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "type" : "string"
          },
          "created_by" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.user.UserDTO"
          }
        },
        "required" : [ "created_at", "data", "id", "is_read", "resource_type", "state", "type", "updated_at" ]
      },
      "ai.zylon.backend.server.app.issuetracker.IssueState" : {
        "enum" : [ "Active", "Deleted" ]
      },
      "ai.zylon.backend.server.app.issuetracker.IssueQueryIncludeFields" : {
        "enum" : [ "User" ]
      },
      "page_array_ai.zylon.backend.server.app.issuetracker.IssueDTO__" : {
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueDTO"
            }
          },
          "next_cursor" : {
            "type" : "string"
          },
          "previous_cursor" : {
            "type" : "string"
          },
          "has_next_page" : {
            "type" : "boolean"
          },
          "has_previous_page" : {
            "type" : "boolean"
          },
          "total_count" : {
            "type" : "number"
          }
        },
        "required" : [ "data", "has_next_page", "has_previous_page" ]
      },
      "ai.zylon.backend.server.app.issuetracker.UpdateIssueDTO" : {
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.issuetracker.IssueType"
          },
          "is_read" : {
            "type" : "boolean"
          }
        }
      },
      "ai.zylon.backend.server.app.integration.sync.SyncEvent" : {
        "discriminator" : {
          "propertyName" : "type"
        },
        "oneOf" : [ {
          "$ref" : "#/components/schemas/sync_completed"
        }, {
          "$ref" : "#/components/schemas/sync_error"
        }, {
          "$ref" : "#/components/schemas/sync_progress"
        }, {
          "$ref" : "#/components/schemas/sync_started"
        } ]
      },
      "sync_completed" : { },
      "sync_error" : {
        "properties" : {
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message" ]
      },
      "sync_progress" : {
        "properties" : {
          "integration_item" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ProjectMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ThreadMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.ArtifactMetadata"
            }, {
              "$ref" : "#/components/schemas/ai.zylon.backend.server.app.search.SearchResult.InteractionMetadata"
            } ]
          },
          "artifact_id" : {
            "type" : "string"
          },
          "artifact" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.project.artifact.ArtifactDTO"
          },
          "op" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.server.app.integration.sync.SyncEvent.Progress.Op"
          },
          "progress" : {
            "type" : "number"
          }
        },
        "required" : [ "op" ]
      },
      "ai.zylon.backend.server.app.integration.sync.SyncEvent.Progress.Op" : {
        "enum" : [ "Added", "Removed", "Skipped", "Updated", "Recreated", "Error" ]
      },
      "sync_started" : {
        "properties" : {
          "current_artifact_count" : {
            "type" : "number"
          },
          "integration_item_count" : {
            "type" : "number"
          }
        }
      },
      "ai.zylon.backend.server.app.integration.BasicAuthIntegrationConfigDTO" : {
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "required" : [ "password", "username" ]
      },
      "ai.zylon.backend.server.app.integration.implementations.filesystem.FileSystemItem" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "parentId" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "parent" : {
            "type" : "string"
          },
          "isFile" : {
            "type" : "boolean"
          },
          "isDirectory" : {
            "type" : "boolean"
          },
          "isHidden" : {
            "type" : "boolean"
          },
          "lastModified" : {
            "type" : "number"
          }
        },
        "required" : [ "id", "isDirectory", "isFile", "isHidden", "lastModified", "name", "parentId", "path", "url" ]
      },
      "health" : {
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "uptime" : {
            "type" : "string"
          },
          "commit" : {
            "type" : "string"
          }
        },
        "required" : [ "commit", "status", "uptime" ]
      },
      "license" : {
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "valid_until" : {
            "type" : "string"
          },
          "product" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "provider" : {
            "$ref" : "#/components/schemas/ai.zylon.backend.core.license.LicenseProvider"
          }
        },
        "required" : [ "email", "id", "metadata", "product", "provider", "valid_until" ]
      },
      "ai.zylon.backend.core.license.LicenseProvider" : {
        "enum" : [ "Zylon", "Replicated" ]
      }
    },
    "examples" : { }
  },
  "webhooks" : { }
}